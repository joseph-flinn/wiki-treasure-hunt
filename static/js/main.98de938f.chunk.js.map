{"version":3,"sources":["routes.js","pages/HomePage/HomePage.js","components/NavMenu/NavMenu.js","components/NavBar/NavBar.js","static/videos/background.mp4","components/BackgroundVideo/BackgroundVideo.js","components/App/App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["routes","props","textAlign","alignItems","justifyContent","fontSize","fontWeight","direction","flexGrow","mt","onClick","alert","routesList","Object","entries","map","name","route","NavMenu","isOpen","onClose","history","useHistory","placement","variant","push","home","path","to","NavBar","useDisclosure","onOpen","aria-label","color","icon","Hamburger","BackgroundVideo","position","zIndex","height","width","overflow","top","left","transform","autoPlay","loop","muted","src","videoSource","type","myTheme","extendTheme","useSystemColorMode","styles","global","maxWidth","App","theme","background","component","pageFactory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98de938f.chunk.js","sourcesContent":["import { HomePage } from 'pages/HomePage'\n\nexport const routes = {\n  'home': {\n    'component': HomePage,\n    'path': '/wiki-treasure-hunt'\n  }\n}\n\nexport const routesList = Object.entries(routes).map(([name, route]) => {\n  return { 'name': name, ...route };\n})\n","import React from 'react';\nimport { \n  Button,\n  Box,\n  Flex,\n  Text,\n  Spacer\n} from '@chakra-ui/react';\n\n\nexport const HomePage = props  => {\n  const { ...other } = props; \n\n  return (\n    <Flex\n      textAlign=\"center\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      fontSize=\"36px\"\n      fontWeight=\"bold\"\n      direction=\"column\"\n      flexGrow=\"1\"\n    >\n      <Text>\n        Are you ready for an adventure?\n      </Text>\n      <Button mt='10' onClick={() => alert('Hunt alert')}>\n        Load Hunt\n      </Button>\n    </Flex>\n  );\n};\n","import React from 'react';\nimport {\n  useHistory,\n  Link\n} from 'react-router-dom';\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  Flex,\n  Button,\n  Text\n} from '@chakra-ui/react';\nimport { routes } from 'routes';\n\n\nexport const NavMenu = props => {\n  const { isOpen, onClose, ...others } = props;\n  let history = useHistory();\n\n  return (\n    <Drawer placement='left' onClose={onClose} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader>\n            <Button \n              variant=\"ghost\"\n              onClick={() => {\n                onClose()\n                history.push(routes.home.path)\n              }}\n            >\n              Home\n            </Button>\n            <DrawerCloseButton onClose={onClose} />\n          </DrawerHeader>\n          <DrawerBody>\n            <Flex direction=\"column\">\n              <Link \n                to={routes.home.path}\n                onClick={onClose}\n              >\n                Page 1\n              </Link>\n              <Link \n                to={routes.home.path}\n                onClick={onClose}\n              >\n                Page 2\n              </Link>\n              <Link \n                to={routes.home.path}\n                onClick={onClose}\n              >\n                Page 3\n              </Link>\n            </Flex>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport {\n  Flex,\n  Spacer,\n  IconButton,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { HamburgerIcon } from '@chakra-ui/icons'\n\nimport { NavMenu } from 'components/NavMenu'\n\n\nexport const NavBar = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Flex>\n        <IconButton \n          aria-label=\"Menu Button\" \n          variant=\"ghost\"\n          fontSize=\"lg\"\n          color=\"current\"\n          icon={<HamburgerIcon/>}\n          onClick={onOpen}\n        />\n        <Spacer />\n      </Flex>\n      <NavMenu onClose={onClose} isOpen={isOpen}/> \n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/background.a281c325.mp4\";","import React from 'react';\nimport {\n  Box,\n  AspectRatio\n} from '@chakra-ui/react';\n\nimport videoSource from 'static/videos/background.mp4'\n// Video by Pressmaster from Pexels\n// Video by Kelly Lacy from Pexels\n\n\nexport const BackgroundVideo = props => {\n  const { ...others } = props;\n\n  return (\n    <Box\n      position=\"absolute\"\n      zIndex=\"-1\"\n      height=\"full\"\n      width=\"full\"\n      overflow=\"hidden\"\n    >\n      <video \n        position=\"absolute\"\n        top=\"50%\"\n        left=\"50%\"\n        transform=\"translate(-50%, -50%)\"\n\n        autoPlay=\"autoPlay\" \n        loop=\"loop\" \n        muted \n      >\n        <source src={videoSource} type=\"video/mp4\"/>\n        Your browser does not support the video tag.\n      </video>\n    </Box>\n  );\n};\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Flex,\n  Box,\n  Grid,\n  DarkMode,\n  LightMode,\n  extendTheme,\n  theme\n} from '@chakra-ui/react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { NavBar } from 'components/NavBar'\nimport { BackgroundVideo } from 'components/BackgroundVideo'\nimport { routesList } from 'routes'\n\n\nconst pageFactory = route => {\n  if ( route.name == \"home\" ) {\n    return (\n      <>\n        <BackgroundVideo />\n        <Flex\n          height=\"100vh\" \n          direction=\"column\"\n          background=\"rgba(0, 0, 0, 0.2)\"\n        >\n          <NavBar />\n          <Route path={route.path} component={route.component} />\n        </Flex>\n      </>\n    )\n  }\n\n  return (\n    <Flex\n      height=\"100vh\" \n      direction=\"column\"\n    >\n      <NavBar />\n      <Route path={route.path} component={route.component} />\n    </Flex>\n  )\n}\n\n\nconst myTheme = extendTheme({\n  useSystemColorMode: false,\n  styles: {\n    global: {\n      \"img, video\": {\n        maxWidth: \"none\",\n      }\n    }\n  },\n})\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={myTheme}>\n      <Router>\n        <Switch>\n          {\n            routesList.map(route => (\n              pageFactory(route)\n            ))\n          }\n        </Switch>\n      </Router>\n    </ChakraProvider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}