{"version":3,"sources":["static/videos/background.mp4","components/BackgroundVideo/BackgroundVideo.js","components/HuntDifficulty/HuntDifficulty.js","components/HuntCard/HuntCard.js","pages/Hunt/Hunt.js","routes.js","pages/HomePage/HomePage.js","pages/Hunts/Hunts.js","pages/HowToPlay/HowToPlay.js","components/NavMenu/NavMenu.js","components/NavBar/NavBar.js","components/App/App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["BackgroundVideo","props","position","zIndex","height","width","overflow","top","left","transform","autoPlay","loop","filter","muted","src","videoSource","type","buildRanking","rank","filled","Array","fill","as","BsCircleFill","empty","BsCircle","HuntDifficulty","d","HuntCard","hunt","onClick","w","h","bg","color","borderRadius","justifySelf","_hover","p","flexDirection","fontSize","name","story","routes","history","useHistory","textAlign","alignItems","justifyContent","fontWeight","direction","flexGrow","variant","mt","push","hunts","path","maxW","pt","minChildWidth","spacing","map","i","cardIndex","console","log","id","handleCardClick","query","location","useLocation","URLSearchParams","search","useQuery","get","m","ml","colorScheme","mr","JSON","stringify","routesList","Object","entries","route","NavMenu","isOpen","onClose","placement","home","to","displayName","NavBar","useDisclosure","onOpen","aria-label","icon","Hamburger","myTheme","extendTheme","useSystemColorMode","styles","global","maxWidth","App","theme","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96bfa4a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.a281c325.mp4\";","import React from 'react';\nimport {\n  Box,\n  AspectRatio\n} from '@chakra-ui/react';\n\nimport videoSource from 'static/videos/background.mp4'\n// Video by Pressmaster from Pexels\n// Video by Kelly Lacy from Pexels\n\n\nexport const BackgroundVideo = props => {\n  const { ...others } = props;\n\n  return (\n    <Box\n      position=\"absolute\"\n      zIndex=\"-5\"\n      height=\"full\"\n      width=\"full\"\n      overflow=\"hidden\"\n    >\n      <video \n        position=\"absolute\"\n        top=\"50%\"\n        left=\"50%\"\n        transform=\"translate(-50%, -50%)\"\n        autoPlay=\"autoPlay\" \n        loop=\"loop\" \n        filter=\"brightness(.5)\"\n        muted \n      >\n        <source src={videoSource} type=\"video/mp4\"/>\n        Your browser does not support the video tag.\n      </video>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { \n  Box,\n  Icon\n} from '@chakra-ui/react'\nimport { \n  BsCircle,\n  BsCircleFill\n} from \"react-icons/bs\"\n\n\nconst buildRanking = rank => {\n  const filled = Array(rank).fill(\n    <Icon as={BsCircleFill} />\n  )\n  const empty = Array(5-rank).fill(\n    <Icon as={BsCircle} />\n  )\n\n  return [ ...filled, ...empty ]\n}\n\n\nexport const HuntDifficulty = props => {\n  const { rank, ...others } = props;\n\n  return (\n    <Box d=\"flex\">\n      {\n        buildRanking(rank)\n      }\n    </Box>\n  );\n};\n","import React from 'react';\nimport {\n  Box,\n  Text,\n  Spacer\n} from '@chakra-ui/react';\n\nimport { HuntDifficulty } from 'components/HuntDifficulty'\n\n\nexport const HuntCard = props => {\n  const { hunt, onClick, ...others } = props;\n\n  return (\n    <Box \n      w=\"360px\" \n      h=\"240px\"\n      bg=\"gray.300\"\n      color=\"black\"\n      borderRadius=\"lg\"\n      justifySelf=\"center\"\n      _hover={{\n        \"transform\": \"scale(1.05)\"\n      }}\n      onClick={onClick}\n    >\n      <Box p={4} h=\"full\" d=\"flex\" flexDirection=\"column\">\n        <Text fontSize=\"xl\">{ hunt.name }</Text>\n        <Text p={3}>{ hunt.story }</Text>\n        <Spacer />\n        <HuntDifficulty rank={ hunt.rank } />\n      </Box>\n    </Box>\n  );\n};\n","import React from 'react';\nimport {\n  Box,\n  Button,\n  Code,\n  Spacer,\n  Text\n} from '@chakra-ui/react'\nimport { useLocation } from 'react-router-dom'\n\nimport hunts from 'static/data/hunts'\n\n\nfunction useQuery() {\n  let location = useLocation()\n  return new URLSearchParams(location.search);\n}\n\nexport const Hunt = props => {\n  const { ...others } = props;\n\n  let query = useQuery()\n  const hunt = hunts.filter(hunt => hunt.id == query.get('name'))[0]\n\n  return (\n    <Box d=\"flex\" h=\"100%\" flexDirection=\"column\">\n      <Box d=\"flex\" m=\"2\">\n        <Text ml=\"2\" fontSize=\"xl\">\n          {hunt.name}\n        </Text>\n        <Spacer />\n        <Button \n          colorScheme=\"green\"\n          mr=\"4\"\n        >\n          Load\n        </Button>\n        <Button \n          colorScheme=\"orange\"\n          mr=\"4\"\n        >\n          Reset\n        </Button>\n      </Box>\n      <Box flexGrow=\"1\">\n        <Text>\n          {JSON.stringify(hunt, null, 4)}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import { HomePage } from 'pages/HomePage'\nimport { HowToPlay } from 'pages/HowToPlay'\nimport { Hunts } from 'pages/Hunts'\nimport { Hunt } from 'pages/Hunt'\n\nexport const routes = {\n  'home': {\n    'component': HomePage,\n    'path': '/wiki-treasure-hunt',\n    'displayName': 'Home'\n  },\n  'hunts': {\n    'component': Hunts,\n    'path': '/wiki-treasure-hunt/hunts',\n    'displayName': 'Hunts'\n  },\n  'hunt': {\n    'component': Hunt,\n    'path': '/wiki-treasure-hunt/hunt',\n    'displayName': 'Hunt'\n  },\n  'howToPlay': {\n    'component': HowToPlay,\n    'path': '/wiki-treasure-hunt/how-to-play',\n    'displayName': 'How To Play'\n  }\n}\n\nexport const routesList = Object.entries(routes).map(([name, route]) => {\n  return { 'name': name, ...route };\n})\n","import React from 'react';\nimport { \n  Button,\n  Box,\n  Flex,\n  Text,\n  Spacer\n} from '@chakra-ui/react';\nimport { BackgroundVideo } from 'components/BackgroundVideo'\nimport { useHistory } from 'react-router-dom'\nimport { routes } from 'routes'\n\n\nexport const HomePage = props  => {\n  const { ...other } = props; \n  let history = useHistory();\n\n  return (\n    <>\n      <BackgroundVideo/>\n      <Flex\n        textAlign=\"center\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"36px\"\n        fontWeight=\"bold\"\n        direction=\"column\"\n        flexGrow=\"1\"\n      >\n        <Text color=\"white\">\n          Are you ready for an adventure?\n        </Text>\n        <Button \n          color=\"white\" \n          variant=\"outline\" \n          mt=\"10\" \n          onClick={\n            () => history.push(routes.hunts.path)\n          }\n        >\n          Load Hunt\n        </Button>\n      </Flex>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  SimpleGrid,\n  Container,\n  Center,\n  Box,\n  Text\n} from '@chakra-ui/react';\nimport { useHistory } from 'react-router-dom'\nimport { HuntCard } from 'components/HuntCard'\n\nimport hunts from 'static/data/hunts'\n\n\nexport const Hunts = props => {\n  const { ...others } = props;\n\n  let history = useHistory();\n\n  const handleCardClick = cardIndex => {\n    console.log(cardIndex)\n\n    const hunt = hunts[cardIndex]\n    history.push(`/wiki-treasure-hunt/hunt?name=${hunt.id}`)\n  }\n\n  return (\n    <Container maxW=\"6xl\" h=\"full\">\n      <Center>\n        <Text fontSize=\"2xl\">Choose Your Hunt</Text>\n      </Center>\n      <SimpleGrid pt={6} minChildWidth=\"360px\" spacing=\"20px\">\n        { \n          hunts.map((hunt, i) => (\n            <HuntCard hunt={hunt} key={i} onClick={() => handleCardClick(i)} />\n          ))\n        }\n      </SimpleGrid>\n    </Container>\n  );\n};\n","import React from 'react';\nimport {\n  Text\n} from '@chakra-ui/react';\n\n\nexport const HowToPlay = props => {\n  const { ...others } = props;\n\n  return (\n    <Text fontSize=\"3xl\">\n      Follow the clues. Find the keys to unlock the next clue. Find the treasure before your friends.\n    </Text>\n  );\n};\n","import React from 'react';\nimport {\n  useHistory,\n  Link\n} from 'react-router-dom';\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  Flex,\n  Button,\n  Text\n} from '@chakra-ui/react';\nimport { routes, routesList } from 'routes';\n\n\nexport const NavMenu = props => {\n  const { isOpen, onClose, ...others } = props;\n  let history = useHistory();\n\n  return (\n    <Drawer placement='left' onClose={onClose} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader>\n            <Button \n              variant=\"ghost\"\n              onClick={() => {\n                onClose()\n                history.push(routes.home.path)\n              }}\n            >\n              Home\n            </Button>\n            <DrawerCloseButton onClose={onClose} />\n          </DrawerHeader>\n          <DrawerBody>\n            <Flex direction=\"column\">\n              {\n                routesList.filter(route => route.name !== 'home')\n                  .map(route => (\n                    <Link \n                      to={route.path}\n                      onClick={onClose}\n                    >\n                      <Text fontSize=\"xl\">\n                        {route.displayName}\n                      </Text>\n                    </Link>\n\n                  ))\n              }\n            </Flex>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport {\n  Flex,\n  Spacer,\n  IconButton,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { HamburgerIcon } from '@chakra-ui/icons'\n\nimport { NavMenu } from 'components/NavMenu'\n\n\nexport const NavBar = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Flex>\n        <IconButton \n          aria-label=\"Menu Button\" \n          variant=\"ghost\"\n          fontSize=\"lg\"\n          color=\"white\"\n          icon={<HamburgerIcon/>}\n          onClick={onOpen}\n        />\n        <Spacer />\n      </Flex>\n      <NavMenu onClose={onClose} isOpen={isOpen}/> \n    </>\n  );\n};\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Flex,\n  Box,\n  Grid,\n  DarkMode,\n  LightMode,\n  extendTheme,\n  theme\n} from '@chakra-ui/react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { NavBar } from 'components/NavBar'\nimport { routesList } from 'routes'\n\n\nconst myTheme = extendTheme({\n  useSystemColorMode: false,\n  styles: {\n    global: {\n      \"img, video\": {\n        maxWidth: \"none\",\n      }\n    }\n  },\n})\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={myTheme}>\n      <Router>\n        <Flex\n          height=\"100vh\" \n          direction=\"column\"\n        >\n          <NavBar />\n          <Switch>\n            {\n              routesList.map(route => (\n                <Route \n                  exact={route.name === \"home\" ? true : false }\n                  path={route.path} \n                  component={route.component} \n                />\n              ))\n            }\n          </Switch>\n        </Flex>\n      </Router>\n    </ChakraProvider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}